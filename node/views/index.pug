extends layout/header-footer

block append head
    title map
    
block append link
    style(type="text/css").
        .map-icon
        {
            color: #44403E;
        }

        .entry-btn-wrapper > a, a:visited, a:active
        {
            color: inherit;
            text-decoration: none;
        }

        #map-view-wrapper
        {
            position: relative;
            width: 100%;
            height: 100%;
            background: yellow;
        }
        .canvas
        {
            position: absolute;
            left:0;
            top:0;
            border: 0;
            box-sizing: content-box;
            padding: 0;
            margin: 0;
        }
        
        #antenna-view
        {
            position: relative;
            width: 100%;
            height: 100%;
            background: transparent;
        }
        
        .user-icon-wrapper
        {
            position: absolute;
            width: 120px;
            height: 120px;
        }

        .user-icon
        {
            position: absolute;
            width: 96px;
            height: 96px;
            margin: auto;
            border-radius: 50%;
            border: solid 12px black;
            background-position: center;
            background-size: 120%;
            z-index: 10;
        }

        .antenna-icon
        {
            position: absolute;
            top: -76px;
            left: 4px;
            z-index: 1;
            text-shadow: 2px  2px 0px #ffffff,-2px  2px 0px #ffffff,2px -2px 0px #ffffff,-2px -2px 0px #ffffff,2px  0px 0px #ffffff,0px  2px 0px #ffffff,-2px  0px 0px #ffffff,0px -2px 0px #ffffff;
        }

        .antenna-icon i
        {
            font-size: 90px;
            color: #EE7836;
        }

        #entry-btn
        {
            position:absolute;
            bottom: 40px;
            right: 30px;
            width: 180px;
            height: 180px;
            background: #FFFFFF;
            border: 15px solid #EE7836;
            border-radius: 50%;
            box-sizing: border-box;
        }
        
        #entry-icon i
        {
            margin-left: 20px;
            line-height: 140px;
            color: #EE7836;   
        }
        
        #entry-popup-wrapper
        {
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.2);
            box-sizing:border-box;
            position:fixed;
            top: 0;
            left: 0;
            display: flex;
            visibility: hidden;
            z-index: 100;
        }

        #entry-wrapper
        {
            display: flex;
            width: 820px;
            height: 630px;
            border-radius: 40px;
            margin: auto;
            background: rgba(255, 255, 255, 0.9);
        }

        #entry-btns-wrapper
        {
            margin: auto;
        }


        .entry-btn-wrapper
        {
            margin: 70px;
        }

        .entry-btn
        {
            width: 620px;
            height: 200px;
            margin: auto;
            border-radius: 50px;
            border-color: transparent;
            background-color: #EE7836;
            
            text-align: center;
            font-weight: 900;
            font-size: 48px;
            color: #FCFBFB;
        }

        #request-btn
        {
            line-height: 240px;
        }

        #requests-popup-wrapper
        {
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.2);
            box-sizing:border-box;
            position:fixed;
            top: 0;
            left: 0;
            display: flex;
            visibility: hidden;
            z-index: 100;
        }
        
        #requests-wrapper
        {
            width: 820px;
            height: 70%;
            border-radius: 40px;
            margin: auto;
            background: rgba(255, 255, 255, 0.9);
        }

        #requests-header p
        {
            height: 220px;
            width: 100%;
            line-height: 220px;
            margin: 0;
            padding: 0;
            text-align: center;
            font-size: 100px;
            font-weight: 300;
            color: #EE7836;
        }
        #requests-header p span
        {
            margin: 0;
            padding: 0;
            font-weight: 900;
        }
        
        #requests-header .fas
        {
            color: #EE7836;
            margin-right: 20px;
        }
        
        #requests-container
        {
            width: 100%;
            height: 75%;
            overflow:auto;
        }

        .request-item
        {
            width: 80%;
            height: 220px;
            margin: 40px auto;
            background: white;
            border: 5px #EE7836 solid;
            border-radius: 60px; 
            color: black;
            display: flex;
        }
        
        .request-item-title
        {
            flex-basis: 70%;
            margin: auto;
        }
        
        .request-item-title p
        {
            text-align: center; 
            font-size: 40px;
        }
        
        .request-item-entry
        {
            flex-basis: 30%;
            display: flex;
        }

        .request-item-line
        {
            width: 5px;
            height: 90%;
            margin: auto 0;
            background: #C4C4C4;
        }

        .request-item-entry-btn
        {
            background: transparent;
            padding: 0;
            margin: 0;
            outline: 0;
            border-radius: 0;
            width: 100%;
            font-size: 24px;
            border: 0;
            color: #EE7836;
        }

block content
    #map-view-wrapper
        canvas(id="map-field" class="canvas")
        #antenna-view

        #entry-btn
            #entry-icon
                i.fas.fa-edit

    #entry-popup-wrapper
        #entry-wrapper
            #entry-btns-wrapper
                .entry-btn-wrapper
                    button#antenna-btn.entry-btn 
                        i.fas.fa-broadcast-tower
                        | アンテナを置く
                .entry-btn-wrapper
                    a#request-btn(href=`http://${common.host}/requests/create`)
                        .entry-btn 
                            i.fas.fa-bullhorn
                            | タスケを呼ぶ

    #requests-popup-wrapper
        #requests-wrapper
            #requests-header
                p 
                    i.fas.fa-bell
                    | 近くの
                    span Task
            #requests-container


block js
    script(src="https://unpkg.com/axios/dist/axios.min.js")
    script.
        console.log(#{lat} + " " + #{lng});

        const req_container = document.querySelector("#requests-container");
        const notification_circle = document.querySelector("#notification-circle");

        const user_id = #{user_id};
        const user_icon_image = `#{user_icon_img}`;

        // canvas準備
        const canvas = document.querySelector("#map-field");
        const map_ctx = canvas.getContext("2d");

        const mapview_wrapper = document.querySelector("#map-view-wrapper");
        canvas.width = mapview_wrapper.clientWidth;
        canvas.height = mapview_wrapper.clientHeight;

        console.log("キャンバスの領域\n" + canvas.width + " " + canvas.height);

        //アイコンの半径
        const icon_radius = 30;

        //緯度経度からx,y座標に変換する
        const lngToX = (lng, zoom) => (lng + 180) / 360 * Math.pow(2, zoom);
        const latToY = (lat, zoom) => (1 - Math.log(Math.tan(lat * Math.PI / 180) + 1 / Math.cos(lat * Math.PI / 180)) / Math.PI) / 2 * Math.pow(2, zoom);


        //マップ上の座標計算用中心点
        const center_x = lngToX(#{lng}, #{zoom});
        const center_y = latToY(#{lat}, #{zoom});
        console.log("center:\n(" + lngToX(#{lng}, #{zoom}) + ", " + latToY(#{lat}, #{zoom}) + ")");

        let antennas = [];
        const update_antennas = () =>
        {
            console.log("update antennas");

            const parent = document.querySelector("#antenna-view");
            parent.innerHTML = "";

            for(const antenna of antennas)
            {
                const link_wrapper = document.createElement("a");
                link_wrapper.href = `http://${location.host}/test/users/${antenna.user_id}/${user_id}`;

                const user_wrapper = document.createElement("div");
                user_wrapper.className = "user-icon-wrapper antenna-wrapper";
                user_wrapper.style.visibility = "hidden";

                const antenna_icon = document.createElement("div");
                antenna_icon.className = "antenna-icon";
                antenna_icon.innerHTML = `<i class="fas fa-broadcast-tower"></i>`;

                const user_icon = document.createElement("div");
                user_icon.className = "user-icon";

                const buf = new Image();
                buf.src = antenna.icon_img;
                user_icon.style.backgroundImage = `url("${buf.src}")`;

                user_wrapper.appendChild(antenna_icon);
                user_wrapper.appendChild(user_icon);

                link_wrapper.appendChild(user_wrapper);
                parent.appendChild(link_wrapper);
                const style = window.getComputedStyle(user_wrapper);
                user_wrapper.style.left = `${antenna.x - style.width.substring(0, style.width.length-2) / 2}px`;
                user_wrapper.style.top = `${antenna.y - style.height.substring(0, style.height.length-2) / 2}px`;
                user_wrapper.style.visibility = "visible";
            }
            
            const user_wrapper = document.createElement("div");
            user_wrapper.className = "user-icon-wrapper";
            user_wrapper.style.visibility = "hidden";

            const user_icon = document.createElement("div");
            user_icon.className = "user-icon";
            
            const buf = new Image();
            buf.src = user_icon_image;
            user_icon.style.backgroundImage = `url("${buf.src}")`;
            user_wrapper.appendChild(user_icon);

            parent.appendChild(user_wrapper);
            const style = window.getComputedStyle(user_wrapper);
            user_wrapper.style.left = `${canvas.width / 2 - style.width.substring(0, style.width.length-2) / 2}px`;
            user_wrapper.style.top = `${canvas.height / 2 - style.height.substring(0, style.height.length-2) / 2}px`;
            user_wrapper.style.visibility = "visible";
        }

        const mapImg = new Image();
        mapImg.src = "#{mapimg}";
        mapImg.onload = () => 
        {
            map_ctx.drawImage(mapImg, 0, 0, canvas.width, canvas.height);

            update_antennas();
        };
        
        
        //ポップアップ系
        const entry_popup_background = document.querySelector("#entry-popup-wrapper");
        const entry_btn = document.querySelector("#entry-btn");
        entry_btn.addEventListener("click", () =>
        {
            entry_popup_background.style.visibility ="visible";
        });

        entry_popup_background.addEventListener("click", e =>
        {
            const item = event.target;
            if(item === entry_popup_background)
            {
                entry_popup_background.style.visibility ="hidden";
            }
        });

        const req_popup_background = document.querySelector("#requests-popup-wrapper");
        const notify_btn = document.querySelector("#notify-btn");
        notify_btn.addEventListener("click", () =>
        {
            notification_circle.style.visibility = "hidden";
            req_popup_background.style.visibility ="visible";
        });

        req_popup_background.addEventListener("click", e =>
        {
            const item = event.target;
            if(item === req_popup_background)
            {
                req_popup_background.style.visibility ="hidden";
            }
        });
        
        
        const HOST = location.origin.replace(/^http/, 'ws') + '/web-sock';
        const ws = new WebSocket(HOST);

        ws.onopen = (event) =>
        {
            console.log("on open");
            ws.onmessage = (msg) => 
            {
                console.log("from server: ", msg);

                const event = JSON.parse(msg.data);
                if(event.key == "on_add_antenna")
                {
                    const antenna = event.antenna;
                    antenna.x = Math.floor((#{map_w} / 2) + 256 * (lngToX(antenna.lng, #{zoom}) - center_x)) * canvas.width / #{map_w};
                    antenna.y = Math.floor((#{map_h} / 2) + 256 * (latToY(antenna.lat, #{zoom}) - center_y)) * canvas.height / #{map_h};
                    antennas.push(antenna);
                    
                    update_antennas();
                }
                else if(event.key == "on_remove_antenna")
                {
                    antennas = antennas.filter(v => v.user_id != event.user_id);

                    update_antennas();
                }
                else if(event.key == "on_add_request")
                {
                    console.log("add request");

                    notification_circle.style.visibility = "visible";

                    const element = document.createElement('div');
                    element.className = 'request-item';
                    element.id = `request-item-${event.id}`;
                    
                    element.innerHTML = "<div class='request-item-title'><p>" + event.title + "</p></div>" + 
                        "<div class ='request-item-entry'><div class='request-item-line'></div><button class='request-item-entry-btn'><p>タスケる！</p></button></div>";
                    
                    element.addEventListener("click", () =>
                    {
                        ws.send(JSON.stringify({
                            key: "on_accept",
                            user_id: #{user_id},
                            request_id: event.id
                        }));
                    });

                    req_container.appendChild(element);
                }
                else if(event.key == "on_accepted_request")
                {
                    console.log("accepted : " + event.request_id);

                    const element = document.querySelector(`#request-item-${event.request_id}`);
                    
                    req_container.removeChild(element);

                    location.href = event.url;
                }
                else if(event.key == "on_map_update")
                {
                    const mapImg = new Image();
                    mapImg.src = event.mapimg;
                    mapImg.onload = () => 
                    {
                        map_ctx.drawImage(mapImg, 0, 0, canvas.width, canvas.height);

                        update_antennas();
                    };
                }

                console.log("antennas: ", antennas);
            }
            
            ws.onerror = (error) =>
            {
                console.log(error);
            }

            const antenna_btn = document.querySelector("#antenna-btn");

            let btn_cnt = 0;
            antenna_btn.addEventListener("click", () => 
            {
                if(btn_cnt % 2 == 0)
                {
                    console.log("put up antenna");
                    ws.send(JSON.stringify({
                        key: "on_add_antenna",
                        user_id: #{user_id},
                        lat: #{lat},
                        lng: #{lng}
                    }));
                }
                else
                {
                    console.log("put down antenna");
                    ws.send(JSON.stringify({
                        key: "on_remove_antenna",
                        user_id: #{user_id}
                    })); 
                }

                entry_popup_background.style.visibility ="hidden";

                ++btn_cnt;
            });


            navigator.geolocation.getCurrentPosition((pos) =>
            {
                const lat = pos.coords.latitude;
                const lng = pos.coords.longitude;
                
                console.log(`your location: ${lat}, ${lng}`);
                
                ws.send(JSON.stringify({
                    key: "on_connect",
                    user_id: #{user_id},
                    lat: lat,
                    lng: lng
                }));
            }, () =>
            {
                console.log("unable to retrieve your location");
                
                ws.send(JSON.stringify({
                    key: "on_connect",
                    user_id: #{user_id},
                    lat: null,
                    lng: null
                }));
            });
            
        }
        

