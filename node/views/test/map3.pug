extends ../layout/header-footer

block append head
    title map
    
block append link
    style(type="text/css").
        .entry-btn-wrapper > a, a:visited, a:active
        {
            color: inherit;
            text-decoration: none;
        }

        #map-view-wrapper
        {
            position: relative;
            width: 100%;
            height: 100%;
            background: yellow;
        }
        #antenna_btn_wrapper
        {
            position: absolute;
            top: 10px;
            left: 10px;
        }
        .canvas-wrapper{
            position: relative;
            padding: 0;
            box-sizing: content-box;
            width: 100%;
            height: 100%;
        }
        .canvas{
            position: absolute;
            left:0;
            top:0;
            border: 0;
            box-sizing: content-box;
            padding: 0;
            margin: 0;
        }

        .map-icon
        {
            color: #44403E;
        }

        #entry-btn
        {
            position:absolute;
            bottom: 40px;
            right: 30px;
            width: 180px;
            height: 180px;
            background: #FFFFFF;
            border: 15px solid #EE7836;
            border-radius: 50%;
            box-sizing: border-box;
        }
        
        #entry-icon i
        {
            margin-left: 20px;
            line-height: 140px;
            color: #EE7836;   
        }
        
        #entry-popup-wrapper
        {
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.2);
            box-sizing:border-box;
            position:fixed;
            top: 0;
            left: 0;
            display: flex;
            visibility: hidden;
        }

        #entry-wrapper
        {
            display: flex;
            width: 820px;
            height: 630px;
            border-radius: 40px;
            margin: auto;
            background: rgba(255, 255, 255, 0.9);
        }

        #entry-btns-wrapper
        {
            margin: auto;
        }


        .entry-btn-wrapper
        {
            margin: 70px;
        }

        .entry-btn
        {
            width: 620px;
            height: 200px;
            margin: auto;
            border-radius: 50px;
            border-color: transparent;
            background-color: #EE7836;
            
            text-align: center;
            font-weight: 900;
            font-size: 48px;
            color: #FCFBFB;
        }

        #request-btn
        {
            line-height: 240px;
        }

        #requests-popup-wrapper
        {
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.2);
            box-sizing:border-box;
            position:fixed;
            top: 0;
            left: 0;
            display: flex;
            visibility: hidden;
        }
        
        #requests-wrapper
        {
            width: 820px;
            height: 70%;
            border-radius: 40px;
            margin: auto;
            background: rgba(255, 255, 255, 0.9);
        }

        #requests-header p
        {
            height: 220px;
            width: 100%;
            line-height: 220px;
            margin: 0;
            padding: 0;
            text-align: center;
            font-size: 100px;
            font-weight: 300;
            color: #EE7836;
        }
        #requests-header p span
        {
            margin: 0;
            padding: 0;
            font-weight: 900;
        }
        
        #requests-header .fas
        {
            color: #EE7836;
            margin-right: 20px;
        }
        
        #requests-container
        {
            width: 100%;
            height: 75%;
            overflow:auto;
        }

        .request-item
        {
            width: 80%;
            height: 220px;
            margin: 40px auto;
            background: white;
            border: 5px #EE7836 solid;
            border-radius: 60px; 
            color: black;
            display: flex;
        }
        
        .request-item-title
        {
            flex-basis: 70%;
            margin: auto;
        }
        
        .request-item-title p
        {
            text-align: center; 
            font-size: 40px;
        }
        
        .request-item-entry
        {
            flex-basis: 30%;
            display: flex;
        }

        .request-item-line
        {
            width: 5px;
            height: 90%;
            margin: auto 0;
            background: #C4C4C4;
        }

        .request-item-entry-btn
        {
            background: transparent;
            padding: 0;
            margin: 0;
            outline: 0;
            border-radius: 0;
            width: 100%;
            font-size: 24px;
            border: 0;
            color: #EE7836;
        }

block content
    #map-view-wrapper
        #antenna_btn_wrapper
            button(id="antenna_btn" type="button") アンテナ
        .canvas-wrapper
            canvas(id="map-field" class="canvas")
            canvas(id="antenna-field" class="canvas")
        img(id="map-image")

        #entry-btn
            #entry-icon
                i.fas.fa-edit

    #entry-popup-wrapper
        #entry-wrapper
            #entry-btns-wrapper
                .entry-btn-wrapper
                    button#antenna-btn.entry-btn 
                        | アンテナを置く
                .entry-btn-wrapper
                    a#request-btn(href=`http://localhost:3000/test/request/${user_id}`)
                        .entry-btn 
                            i.fas.fa-bullhorn
                            | タスケを呼ぶ

    #requests-popup-wrapper
        #requests-wrapper
            #requests-header
                p 
                    i.fas.fa-bell
                    | 近くの
                    span Task
            #requests-container


    script(src="https://unpkg.com/axios/dist/axios.min.js")
    script.
        console.log(#{lat} + " " + #{lng});

        const req_container = document.querySelector("#requests-container");

        // canvas準備
        const canvas = document.querySelector("#map-field");
        const antenna_canvas = document.querySelector("#antenna-field");  
        const map_ctx = canvas.getContext("2d");
        const antenna_ctx = antenna_canvas.getContext("2d");

        const wrapper = document.querySelector("#map-view-wrapper");
        antenna_canvas.width = canvas.width = wrapper.clientWidth;
        antenna_canvas.height = canvas.height = wrapper.clientHeight;

        console.log("キャンバスの領域\n" + canvas.width + " " + canvas.height);

        //アイコンの半径
        const icon_radius = 30;

        //緯度経度からx,y座標に変換する
        const lngToX = (lng, zoom) => 
        {
            return ((lng + 180) / 360) * Math.pow(2, zoom);
        };
        const latToY = (lat, zoom) =>
        {
            return (1 - Math.log(Math.tan(lat * Math.PI / 180) + 1 / Math.cos(lat * Math.PI / 180)) / Math.PI) / 2 * Math.pow(2, zoom);
        };

        //マップ上の座標計算用中心点
        const center_x = lngToX(#{lng}, #{zoom});
        const center_y = latToY(#{lat}, #{zoom});
        console.log("center:\n(" + lngToX(#{lng}, #{zoom}) + ", " + latToY(#{lat}, #{zoom}) + ")");


        const redraw = () =>
        {
            antenna_ctx.clearRect(0, 0, canvas.width, canvas.height);

            console.log("redraw");
            antenna_ctx.beginPath();     // 1.Pathで描画を開始する

            antenna_ctx.moveTo(
                Math.floor((#{map_w} / 2) + 256 * (lngToX(#{lng} - 0.02, #{zoom}) - center_x)) * canvas.width / #{map_w},
                Math.floor((#{map_h} / 2) + 256 * (latToY(#{lat} - 0.02, #{zoom}) - center_y)) * canvas.height / #{map_h});
            antenna_ctx.lineTo(
                Math.floor((#{map_w} / 2) + 256 * (lngToX(#{lng} + 0.02, #{zoom}) - center_x)) * canvas.width / #{map_w},
                Math.floor((#{map_h} / 2) + 256 * (latToY(#{lat} - 0.02, #{zoom}) - center_y)) * canvas.height / #{map_h});

            antenna_ctx.moveTo(
                Math.floor((#{map_w} / 2) + 256 * (lngToX(#{lng} + 0.02, #{zoom}) - center_x)) * canvas.width / #{map_w},
                Math.floor((#{map_h} / 2) + 256 * (latToY(#{lat} - 0.02, #{zoom}) - center_y)) * canvas.height / #{map_h});
            antenna_ctx.lineTo(
                Math.floor((#{map_w} / 2) + 256 * (lngToX(#{lng} + 0.02, #{zoom}) - center_x)) * canvas.width / #{map_w},
                Math.floor((#{map_h} / 2) + 256 * (latToY(#{lat} + 0.02, #{zoom}) - center_y)) * canvas.height / #{map_h});

            antenna_ctx.moveTo(
                Math.floor((#{map_w} / 2) + 256 * (lngToX(#{lng} + 0.02, #{zoom}) - center_x)) * canvas.width / #{map_w},
                Math.floor((#{map_h} / 2) + 256 * (latToY(#{lat} + 0.02, #{zoom}) - center_y)) * canvas.height / #{map_h});
            antenna_ctx.lineTo(
                Math.floor((#{map_w} / 2) + 256 * (lngToX(#{lng} - 0.02, #{zoom}) - center_x)) * canvas.width / #{map_w},
                Math.floor((#{map_h} / 2) + 256 * (latToY(#{lat} + 0.02, #{zoom}) - center_y)) * canvas.height / #{map_h});

            antenna_ctx.moveTo(
                Math.floor((#{map_w} / 2) + 256 * (lngToX(#{lng} - 0.02, #{zoom}) - center_x)) * canvas.width / #{map_w},
                Math.floor((#{map_h} / 2) + 256 * (latToY(#{lat} + 0.02, #{zoom}) - center_y)) * canvas.height / #{map_h});
            antenna_ctx.lineTo(
                Math.floor((#{map_w} / 2) + 256 * (lngToX(#{lng} - 0.02, #{zoom}) - center_x)) * canvas.width / #{map_w},
                Math.floor((#{map_h} / 2) + 256 * (latToY(#{lat} - 0.02, #{zoom}) - center_y)) * canvas.height / #{map_h});

            antenna_ctx.stroke();        // 4.Canvas上に描画する


            for(const antenna of antennas)
            {
                antenna_ctx.beginPath();
                antenna_ctx.fillStyle = 'blue';
                antenna_ctx.arc(antenna.x, antenna.y, icon_radius, 0, 2 * Math.PI, false);
                antenna_ctx.fill();
                antenna_ctx.stroke();

                console.log(`draw antenna: user_id = ${antenna.user_id} (${antenna.x}, ${antenna.y})`);
            }

            //自身を意味する円を描画
            antenna_ctx.beginPath();
            antenna_ctx.fillStyle = 'red';
            antenna_ctx.arc(canvas.width / 2, canvas.height / 2, 30, 0, 2 * Math.PI, false);
            antenna_ctx.fill();
            antenna_ctx.stroke();
        }

        const mapImg = new Image();
        mapImg.src = "#{mapimg}";
        mapImg.onload = () => 
        {
            map_ctx.drawImage(mapImg, 0, 0, canvas.width, canvas.height);

            redraw();
        };
        
        //ポップアップ系
        const entry_popup_background = document.querySelector("#entry-popup-wrapper");
        const entry_btn = document.querySelector("#entry-btn");
        entry_btn.addEventListener("click", () =>
        {
            entry_popup_background.style.visibility ="visible";
        });

        entry_popup_background.addEventListener("click", e =>
        {
            const item = event.target;
            if(item === entry_popup_background)
            {
                entry_popup_background.style.visibility ="hidden";
            }
        });

        const req_popup_background = document.querySelector("#requests-popup-wrapper");
        const notify_btn = document.querySelector("#notify-btn");
        notify_btn.addEventListener("click", () =>
        {
            req_popup_background.style.visibility ="visible";
        });

        req_popup_background.addEventListener("click", e =>
        {
            const item = event.target;
            if(item === req_popup_background)
            {
                req_popup_background.style.visibility ="hidden";
            }
        });
        
        const HOST = location.origin.replace(/^http/, 'ws') + '/test/map3/web-sock';
        const ws = new WebSocket(HOST);

        let antennas = [];
        ws.onopen = (event) =>
        {
            console.log("on open");
            ws.onmessage = (msg) => 
            {
                console.log("from server: ", msg);

                const event = JSON.parse(msg.data);
                if(event.key == "on_add_antenna")
                {
                    const antenna = event.antenna;
                    antenna.x = Math.floor((#{map_w} / 2) + 256 * (lngToX(antenna.lng, #{zoom}) - center_x)) * canvas.width / #{map_w};
                    antenna.y = Math.floor((#{map_h} / 2) + 256 * (latToY(antenna.lat, #{zoom}) - center_y)) * canvas.height / #{map_h};
                    antennas.push(antenna);
                    
                    redraw();
                }
                else if(event.key == "on_remove_antenna")
                {
                    antennas = antennas.filter(v => v.user_id != event.user_id);

                    redraw();
                }
                else if(event.key == "on_add_request")
                {
                    console.log("add request");


                    const element = document.createElement('div');
                    element.className = 'request-item';
                    
                    element.innerHTML = "<div class='request-item-title'><p>" + event.title + "</p></div>" + 
                        "<div class ='request-item-entry'><div class='request-item-line'></div><button class='request-item-entry-btn'><p>タスケる！</p></button></div>";
                    
                    
                    req_container.appendChild(element);
                }

                console.log("antennas: ", antennas);
            }
            
            ws.onerror = (error) =>
            {
                console.log(error);
            }

            ws.send(JSON.stringify({
                key: "on_connect",
                user_id: #{user_id},
                range: 100,
                lat: #{lat},
                lng: #{lng}
            }));

            const antenna_btn = document.querySelector("#antenna-btn");

            let btn_cnt = 0;
            antenna_btn.addEventListener("click", () => 
            {
                if(btn_cnt % 2 == 0)
                {
                    console.log("put up antenna");
                    ws.send(JSON.stringify({
                        key: "on_add_antenna",
                        user_id: #{user_id},
                        lat: #{lat},
                        lng: #{lng}
                    }));
                }
                else
                {
                    console.log("put down antenna");
                    ws.send(JSON.stringify({
                        key: "on_remove_antenna",
                        user_id: #{user_id}
                    })); 
                }

                entry_popup_background.style.visibility ="hidden";

                ++btn_cnt;
            });
        }


        antenna_canvas.addEventListener('click', e =>
        {
            const rect = e.target.getBoundingClientRect();
            const pointer_x = e.clientX - rect.left;
            const pointer_y = e.clientY - rect.top;

            for(const antenna of antennas)
            {
                if((antenna.x - pointer_x)**2 + (antenna.y - pointer_y)**2 <= icon_radius**2)
                {
                    location.href = "http://localhost:3000/users/" + antenna.user_id;
                    break;
                }
            }
        });

