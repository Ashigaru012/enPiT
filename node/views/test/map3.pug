extends ../layout/header-footer

block append head
    title map
    
block append link
    style(type="text/css").
        #map-view-wrapper
        {
            width: 100%;
            height: 100%;
            background: yellow;
        }
        #antenna_btn_wrapper
        {
            position: absolute;
            top: 10px;
            left: 10px;
        }
        .canvas-wrapper{
            position: relative;
            padding: 0;
            box-sizing: content-box;
            width: 100%;
            height: 100%;
        }
        .canvas{
            position: absolute;
            left:0;
            top:0;
            border: 0;
            box-sizing: content-box;
            padding: 0;
            margin: 0;
        }

block content
    #map-view-wrapper
        #antenna_btn_wrapper
            button(id="antenna_btn" type="button") アンテナ
        .canvas-wrapper
            canvas(id="map-field" class="canvas")
            canvas(id="antenna-field" class="canvas")
        img(id="map-image")


    script(src="https://unpkg.com/axios/dist/axios.min.js")
    script.
        console.log(#{lat} + " " + #{lng});

        // canvas準備
        const canvas = document.querySelector("#map-field");
        const antenna_canvas = document.querySelector("#antenna-field");  
        const map_ctx = canvas.getContext("2d");
        const antenna_ctx = antenna_canvas.getContext("2d");

        const wrapper = document.querySelector("#map-view-wrapper");
        antenna_canvas.width = canvas.width = wrapper.clientWidth;
        antenna_canvas.height = canvas.height = wrapper.clientHeight;

        console.log("キャンバスの領域\n" + canvas.width + " " + canvas.height);

        //アイコンの半径
        const icon_radius = 30;

        //緯度経度からx,y座標に変換する
        const lngToX = (lng, zoom) => 
        {
            return ((lng + 180) / 360) * Math.pow(2, zoom);
        };
        const latToY = (lat, zoom) =>
        {
            return (1 - Math.log(Math.tan(lat * Math.PI / 180) + 1 / Math.cos(lat * Math.PI / 180)) / Math.PI) / 2 * Math.pow(2, zoom);
        };

        //マップ上の座標計算用中心点
        const center_x = lngToX(#{lng}, #{zoom});
        const center_y = latToY(#{lat}, #{zoom});
        console.log("center:\n(" + lngToX(#{lng}, #{zoom}) + ", " + latToY(#{lat}, #{zoom}) + ")");


        const redraw = () =>
        {
            antenna_ctx.clearRect(0, 0, canvas.width, canvas.height);

            console.log("redraw");
            antenna_ctx.beginPath();     // 1.Pathで描画を開始する

            antenna_ctx.moveTo(
                Math.floor((#{map_w} / 2) + 256 * (lngToX(#{lng} - 0.02, #{zoom}) - center_x)) * canvas.width / #{map_w},
                Math.floor((#{map_h} / 2) + 256 * (latToY(#{lat} - 0.02, #{zoom}) - center_y)) * canvas.height / #{map_h});
            antenna_ctx.lineTo(
                Math.floor((#{map_w} / 2) + 256 * (lngToX(#{lng} + 0.02, #{zoom}) - center_x)) * canvas.width / #{map_w},
                Math.floor((#{map_h} / 2) + 256 * (latToY(#{lat} - 0.02, #{zoom}) - center_y)) * canvas.height / #{map_h});

            antenna_ctx.moveTo(
                Math.floor((#{map_w} / 2) + 256 * (lngToX(#{lng} + 0.02, #{zoom}) - center_x)) * canvas.width / #{map_w},
                Math.floor((#{map_h} / 2) + 256 * (latToY(#{lat} - 0.02, #{zoom}) - center_y)) * canvas.height / #{map_h});
            antenna_ctx.lineTo(
                Math.floor((#{map_w} / 2) + 256 * (lngToX(#{lng} + 0.02, #{zoom}) - center_x)) * canvas.width / #{map_w},
                Math.floor((#{map_h} / 2) + 256 * (latToY(#{lat} + 0.02, #{zoom}) - center_y)) * canvas.height / #{map_h});

            antenna_ctx.moveTo(
                Math.floor((#{map_w} / 2) + 256 * (lngToX(#{lng} + 0.02, #{zoom}) - center_x)) * canvas.width / #{map_w},
                Math.floor((#{map_h} / 2) + 256 * (latToY(#{lat} + 0.02, #{zoom}) - center_y)) * canvas.height / #{map_h});
            antenna_ctx.lineTo(
                Math.floor((#{map_w} / 2) + 256 * (lngToX(#{lng} - 0.02, #{zoom}) - center_x)) * canvas.width / #{map_w},
                Math.floor((#{map_h} / 2) + 256 * (latToY(#{lat} + 0.02, #{zoom}) - center_y)) * canvas.height / #{map_h});

            antenna_ctx.moveTo(
                Math.floor((#{map_w} / 2) + 256 * (lngToX(#{lng} - 0.02, #{zoom}) - center_x)) * canvas.width / #{map_w},
                Math.floor((#{map_h} / 2) + 256 * (latToY(#{lat} + 0.02, #{zoom}) - center_y)) * canvas.height / #{map_h});
            antenna_ctx.lineTo(
                Math.floor((#{map_w} / 2) + 256 * (lngToX(#{lng} - 0.02, #{zoom}) - center_x)) * canvas.width / #{map_w},
                Math.floor((#{map_h} / 2) + 256 * (latToY(#{lat} - 0.02, #{zoom}) - center_y)) * canvas.height / #{map_h});

            antenna_ctx.stroke();        // 4.Canvas上に描画する


            for(const antenna of antennas)
            {
                antenna_ctx.beginPath();
                antenna_ctx.fillStyle = 'blue';
                antenna_ctx.arc(antenna.x, antenna.y, icon_radius, 0, 2 * Math.PI, false);
                antenna_ctx.fill();
                antenna_ctx.stroke();

                console.log(`draw antenna: user_id = ${antenna.user_id} (${antenna.x}, ${antenna.y})`);
            }

            //自身を意味する円を描画
            antenna_ctx.beginPath();
            antenna_ctx.fillStyle = 'red';
            antenna_ctx.arc(canvas.width / 2, canvas.height / 2, 30, 0, 2 * Math.PI, false);
            antenna_ctx.fill();
            antenna_ctx.stroke();
        }

        const mapImg = new Image();
        mapImg.src = "#{mapimg}";
        mapImg.onload = () => 
        {
            map_ctx.drawImage(mapImg, 0, 0, canvas.width, canvas.height);

            redraw();
        };
        
        const HOST = location.origin.replace(/^http/, 'ws') + '/test/map3/web-sock';
        const ws = new WebSocket(HOST);

        let antennas = [];
        ws.onopen = (event) =>
        {
            console.log("on open");
            ws.onmessage = (msg) => 
            {
                console.log("from server: ", msg);

                const event = JSON.parse(msg.data);
                if(event.key == "on_add_antenna")
                {
                    const antenna = event.antenna;
                    antenna.x = Math.floor((#{map_w} / 2) + 256 * (lngToX(antenna.lng, #{zoom}) - center_x)) * canvas.width / #{map_w};
                    antenna.y = Math.floor((#{map_h} / 2) + 256 * (latToY(antenna.lat, #{zoom}) - center_y)) * canvas.height / #{map_h};
                    antennas.push(antenna);
                    
                    redraw();
                }
                else if(event.key == "on_remove_antenna")
                {
                    antennas = antennas.filter(v => v.user_id != event.user_id);

                    redraw();
                }

                console.log("antennas: ", antennas);
            }
            
            ws.onerror = (error) =>
            {
                console.log(error);
            }

            ws.send(JSON.stringify({
                key: "on_connect",
                user_id: #{user_id},
                range: 100,
                lat: #{lat},
                lng: #{lng}
            }));

            
            const antenna_btn = document.querySelector("#antenna_btn");

            let btn_cnt = 0;
            antenna_btn.addEventListener("click", () => 
            {
                if(btn_cnt % 2 == 0)
                {
                    console.log("put up antenna");
                    ws.send(JSON.stringify({
                        key: "on_add_antenna",
                        user_id: #{user_id},
                        lat: #{lat},
                        lng: #{lng}
                    }));
                }
                else
                {
                    console.log("put down antenna");
                    ws.send(JSON.stringify({
                        key: "on_remove_antenna",
                        user_id: #{user_id}
                    })); 
                }

                ++btn_cnt;
            });
        }


        antenna_canvas.addEventListener('click', e =>
        {
            const rect = e.target.getBoundingClientRect();
            const pointer_x = e.clientX - rect.left;
            const pointer_y = e.clientY - rect.top;

            for(const antenna of antennas)
            {
                if((antenna.x - pointer_x)**2 + (antenna.y - pointer_y)**2 <= icon_radius**2)
                {
                    location.href = "http://localhost:3000/users/" + antenna.user_id;
                    break;
                }
            }
        });

