extends ../layout/header-footer

block append head
    title map
    
block append link
    style(type="text/css").
        #map-view-wrapper
        {
            /*
            width: 747px;
            height: 852px;
            */
            width: 100%;
            height: 100%;
            background: yellow;
        }
        #map-field
        {
            width: 100%;
            height: 100%;
        }

block content
    #map-view-wrapper
        canvas(id="map-field")
        img(id="map-image")


    script(src="https://unpkg.com/axios/dist/axios.min.js")
    script(src="https://cdn.geolonia.com/community-geocoder.js")
    script.
        window.onload = ()=>
        {
            console.log(#{lat} + " " + #{lng});

            // canvas準備
            const canvas = document.querySelector("#map-field");  
            const ctx = canvas.getContext("2d");

            const wrapper = document.querySelector("#map-view-wrapper");
            canvas.width = wrapper.clientWidth;
            canvas.height = wrapper.clientHeight;

            console.log("キャンバスの領域\n" + canvas.width + " " + canvas.height);

            const mapImg = new Image();
            mapImg.src = "#{mapimg}";
            mapImg.onload = () => 
            {
                ctx.drawImage(mapImg, 0, 0, canvas.width, canvas.height);

                const lngToX = (lng, zoom) => 
                {
                    return ((lng + 180) / 360) * Math.pow(2, zoom);
                };
                const latToY = (lat, zoom) =>
                {
                    return (1 - Math.log(Math.tan(lat * Math.PI / 180) + 1 / Math.cos(lat * Math.PI / 180)) / Math.PI) / 2 * Math.pow(2, zoom);
                };
                
                //円を描画
                ctx.beginPath();
                ctx.fillStyle = 'red';
                ctx.arc(canvas.width / 2, canvas.height / 2, 30, 0, 2 * Math.PI, false);
                ctx.fill();
                ctx.stroke();

                const center_x = lngToX(#{lng}, #{zoom});
                const center_y = latToY(#{lat}, #{zoom});
                console.log("center:\n(" + lngToX(#{lng}, #{zoom}) + ", " + latToY(#{lat}, #{zoom}) + ")");

                const anntenas = !{JSON.stringify(anntenas)};
                for(const anntena of anntenas)
                {
                    console.log("anntena:\n" + anntena.lat + ", " + anntena.lng);
                    const x = Math.floor((#{map_w} / 2) + 256 * (lngToX(anntena.lng, #{zoom}) - center_x)) * canvas.width / #{map_w};
                    const y = Math.floor((#{map_h} / 2) + 256 * (latToY(anntena.lat, #{zoom}) - center_y)) * canvas.height / #{map_h};

                    console.log(x + ", " + y);

                    ctx.beginPath();
                    ctx.fillStyle = 'blue';
                    ctx.arc(x, y, 30, 0, 2 * Math.PI, false);
                    ctx.fill();
                    ctx.stroke();
                }
            };
        };